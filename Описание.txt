# Отчет по разработке лабиринта MazeSolver.java

## 1. Проблема (Исходная ситуация)

Исходная проблема заключалась в некорректной генерации лабиринта и отсутствии решения.  При запуске программы выводился нерабочий лабиринт небольшого размера, и, соответственно, путь не находился.  Основные недостатки:

*   Некорректная инициализация и генерация лабиринта.
*   Жестко заданные координаты старта и финиша.
*   Некорректная работа алгоритма поиска пути.
*   Возможные ошибки с размерами лабиринта (четные/нечетные).

## 2. Идеи и Подходы

Для решения проблемы были рассмотрены следующие подходы и идеи:

*   **Реализация алгоритма генерации лабиринта (Recursive Backtracking):**  Выбор наиболее подходящего алгоритма для генерации.
*   **Рандомизация:** Использование случайных чисел для создания более разнообразных лабиринтов и выбора начальных/конечных точек.
*   **Проверка границ:**  Убедиться в правильной проверке выхода за границы массива при генерации и решении лабиринта.
*   **Алгоритм поиска пути (DFS - Depth-First Search):**  Выбор алгоритма поиска пути.
*   **Визуализация:**  Добавление отображения лабиринта и найденного пути.
*   **Разделение логики:** Разделение кода на отдельные методы для генерации, поиска пути и отображения.
*   **Корректная обработка ввода пользователя:** Предоставление пользователю возможности выбора размера лабиринта и обработка неверного ввода.
*   **Гарантирование пути:** Убедиться, что между стартом и финишем всегда существует путь.

## 3. Решения Проблем и Реализация

Были предприняты следующие шаги для решения проблем:

*   **Инициализация `maze`:**  Исправлена инициализация массива `maze` в конструкторе.
*   **Размеры лабиринта:**  Добавлено требование, чтобы размеры лабиринта были нечетными, так как это необходимо для алгоритма генерации с использованием рекурсивного обхода с возвратом.
*   **Генерация лабиринта в конструкторе:** Вызов `generateMaze()` в конструкторе, чтобы гарантировать, что лабиринт сгенерирован при создании объекта `MazeSolver`.
*   **Рандомизация стартовой и конечной точек:**  Реализована случайная генерация начальной и конечной точек, но после генерации лабиринта.
*   **Проверка границ в `recursiveBacktracking()`:**  Добавлены обязательные проверки выхода за границы массива в методе `recursiveBacktracking`.
*   **Проверка границ в `findPath()`:** Обеспечена проверка границ в методе `findPath()`.
*   **Нечетные значения startRow, startCol, endRow и endCol:** Код гарантирует, что координаты старта и конца будут нечетными.
*   **Улучшенная визуализация:** Улучшено отображение лабиринта, включая путь.

## 4. Результаты и Выводы

В результате внесенных изменений:

*   Лабиринты генерируются корректно, с использованием алгоритма рекурсивного обхода с возвратом.
*   Старт и финиш выбираются случайным образом, но всегда на пути.
*   Алгоритм поиска пути (DFS) успешно находит решение лабиринта (если оно существует).
*   Обеспечена корректная работа с различными размерами лабиринтов (с учетом ограничений).
*   Предоставлен удобный вывод лабиринта с отображением пути.

## 5.  Заключение

В целом, проблема была успешно решена.  Исходный код был существенно улучшен, что привело к корректной генерации и решению лабиринтов.  Дальнейшее развитие может включать в себя оптимизацию, расширение функциональности и улучшение пользовательского опыта.